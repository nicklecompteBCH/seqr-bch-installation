# Generated by Django 2.2.5 on 2019-10-01 17:59

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='GeneInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gene_id', models.CharField(db_index=True, max_length=20, unique=True)),
                ('gene_symbol', models.TextField(blank=True, null=True)),
                ('chrom_grch37', models.CharField(blank=True, max_length=2, null=True)),
                ('start_grch37', models.IntegerField(blank=True, null=True)),
                ('end_grch37', models.IntegerField(blank=True, null=True)),
                ('strand_grch37', models.CharField(blank=True, max_length=1, null=True)),
                ('coding_region_size_grch37', models.IntegerField(default=0)),
                ('chrom_grch38', models.CharField(blank=True, max_length=2, null=True)),
                ('start_grch38', models.IntegerField(blank=True, null=True)),
                ('end_grch38', models.IntegerField(blank=True, null=True)),
                ('strand_grch38', models.CharField(blank=True, max_length=1, null=True)),
                ('coding_region_size_grch38', models.IntegerField(default=0)),
                ('gencode_gene_type', models.TextField(blank=True, null=True)),
                ('gencode_release', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='HumanPhenotypeOntology',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hpo_id', models.CharField(db_index=True, max_length=20, unique=True)),
                ('parent_id', models.CharField(blank=True, max_length=20, null=True)),
                ('category_id', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('is_category', models.BooleanField(db_index=True, default=False)),
                ('name', models.TextField()),
                ('definition', models.TextField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TranscriptInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transcript_id', models.CharField(db_index=True, max_length=20, unique=True)),
                ('chrom_grch37', models.CharField(blank=True, max_length=2, null=True)),
                ('start_grch37', models.IntegerField(blank=True, null=True)),
                ('end_grch37', models.IntegerField(blank=True, null=True)),
                ('strand_grch37', models.CharField(blank=True, max_length=1, null=True)),
                ('coding_region_size_grch37', models.IntegerField(default=0)),
                ('chrom_grch38', models.CharField(blank=True, max_length=2, null=True)),
                ('start_grch38', models.IntegerField(blank=True, null=True)),
                ('end_grch38', models.IntegerField(blank=True, null=True)),
                ('strand_grch38', models.CharField(blank=True, max_length=1, null=True)),
                ('coding_region_size_grch38', models.IntegerField(default=0)),
                ('gene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reference_data.GeneInfo')),
            ],
        ),
        migrations.CreateModel(
            name='PrimateAI',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentile_25', models.FloatField()),
                ('percentile_75', models.FloatField()),
                ('gene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reference_data.GeneInfo')),
            ],
        ),
        migrations.CreateModel(
            name='GeneConstraint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mis_z', models.FloatField()),
                ('mis_z_rank', models.IntegerField()),
                ('pLI', models.FloatField()),
                ('pLI_rank', models.IntegerField()),
                ('louef', models.FloatField()),
                ('louef_rank', models.IntegerField()),
                ('gene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reference_data.GeneInfo')),
            ],
        ),
        migrations.CreateModel(
            name='dbNSFPGene',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uniprot_acc', models.TextField(blank=True, null=True)),
                ('uniprot_id', models.TextField(blank=True, null=True)),
                ('entrez_gene_id', models.TextField(blank=True, null=True)),
                ('ccds_id', models.TextField(blank=True, null=True)),
                ('refseq_id', models.TextField(blank=True, null=True)),
                ('ucsc_id', models.TextField(blank=True, null=True)),
                ('pathway_uniprot', models.TextField(blank=True, null=True)),
                ('pathway_biocarta_short', models.TextField(blank=True, null=True)),
                ('pathway_biocarta_full', models.TextField(blank=True, null=True)),
                ('pathway_consensus_path_db', models.TextField(blank=True, null=True)),
                ('pathway_kegg_id', models.TextField(blank=True, null=True)),
                ('pathway_kegg_full', models.TextField(blank=True, null=True)),
                ('function_desc', models.TextField(blank=True, null=True)),
                ('disease_desc', models.TextField(blank=True, null=True)),
                ('trait_association_gwas', models.TextField(blank=True, null=True)),
                ('go_biological_process', models.TextField(blank=True, null=True)),
                ('go_cellular_component', models.TextField(blank=True, null=True)),
                ('go_molecular_function', models.TextField(blank=True, null=True)),
                ('tissue_specificity', models.TextField(blank=True, null=True)),
                ('expression_egenetics', models.TextField(blank=True, null=True)),
                ('expression_gnf_atlas', models.TextField(blank=True, null=True)),
                ('rvis_exac', models.TextField(blank=True, null=True)),
                ('ghis', models.TextField(blank=True, null=True)),
                ('essential_gene', models.TextField(blank=True, null=True)),
                ('mgi_mouse_gene', models.TextField(blank=True, null=True)),
                ('mgi_mouse_phenotype', models.TextField(blank=True, null=True)),
                ('zebrafish_gene', models.TextField(blank=True, null=True)),
                ('zebrafish_structure', models.TextField(blank=True, null=True)),
                ('zebrafish_phenotype_quality', models.TextField(blank=True, null=True)),
                ('zebrafish_phenotype_tag', models.TextField(blank=True, null=True)),
                ('gene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reference_data.GeneInfo')),
            ],
        ),
        migrations.CreateModel(
            name='Omim',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mim_number', models.IntegerField()),
                ('gene_description', models.TextField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('phenotype_inheritance', models.TextField(blank=True, null=True)),
                ('phenotype_mim_number', models.IntegerField(blank=True, null=True)),
                ('phenotype_description', models.TextField(blank=True, null=True)),
                ('phenotype_map_method', models.CharField(blank=True, choices=[('1', 'the disorder is placed on the map based on its association with a gene, but the underlying defect is not known.'), ('2', 'the disorder has been placed on the map by linkage; no mutation has been found.'), ('3', 'the molecular basis for the disorder is known; a mutation has been found in the gene.'), ('4', 'a contiguous gene deletion or duplication syndrome, multiple genes are deleted or duplicated causing the phenotype.')], max_length=1, null=True)),
                ('phenotypic_series_number', models.TextField(blank=True, null=True)),
                ('gene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reference_data.GeneInfo')),
            ],
            options={
                'unique_together': {('mim_number', 'phenotype_mim_number', 'phenotype_description')},
            },
        ),
        migrations.CreateModel(
            name='MGI',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marker_id', models.CharField(max_length=15)),
                ('gene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reference_data.GeneInfo')),
            ],
            options={
                'unique_together': {('gene', 'marker_id')},
            },
        ),
        migrations.CreateModel(
            name='GeneExpression',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tissue_type', models.CharField(choices=[('lung', 'lung'), ('heart', 'heart'), ('adipose_tissue', 'adipose_tissue'), ('skin', 'skin'), ('salivary_gland', 'salivary_gland'), ('esophagus', 'esophagus'), ('nerve', 'nerve'), ('uterus', 'uterus'), ('small_intestine', 'small_intestine'), ('muscle', 'muscle'), ('spleen', 'spleen'), ('colon', 'colon'), ('whole_blood', 'whole_blood'), ('brain', 'brain'), ('cells_-_transformed_fibroblasts', 'cells_-_transformed_fibroblasts'), ('thyroid', 'thyroid'), ('breast', 'breast'), ('testis', 'testis'), ('prostate', 'prostate'), ('ovary', 'ovary'), ('blood_vessel', 'blood_vessel'), ('vagina', 'vagina'), ('pancreas', 'pancreas'), ('adrenal_gland', 'adrenal_gland'), ('pituitary', 'pituitary'), ('kidney', 'kidney'), ('liver', 'liver'), ('stomach', 'stomach'), ('cells_-_ebv-transformed_lymphocytes', 'cells_-_ebv-transformed_lymphocytes')], max_length=40)),
                ('expression_values', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('gene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reference_data.GeneInfo')),
            ],
            options={
                'unique_together': {('gene', 'tissue_type')},
            },
        ),
    ]
